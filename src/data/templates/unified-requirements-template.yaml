# 統合要件定義マインドマップテンプレート
# Requirements-to-Implementation Unified Mindmap Template
version: "2.0"
title: "プロジェクト名を入力してください"
description: "要求から実装まで一気通貫で管理する統合マインドマップ"
templateType: "unified-requirements"
abstractionLevels: [0, 1, 2, 3, 4, 5]  # 0=ビジネスニーズ, 1=ステークホルダー要求, 2=ユーザーストーリー, 3=システム要件, 4=設計仕様, 5=実装タスク

# 横断的関心事の定義
crossCuttingConcerns:
  stakeholders:
    PM001:
      name: "プロダクトマネージャー"
      role: "product_manager"
      organization: "プロダクト部"
      influence: "high"
      interest: "high"
      involvementByLevel:
        0: "owner"      # Business Need
        1: "reviewer"   # Stakeholder Request
        2: "approver"   # System Requirement
        3: "consulted"  # Feature Specification
        4: "informed"   # User Story
        5: "informed"   # Implementation Task
      concerns: ["business_value", "user_satisfaction", "timeline"]
      expectations:
        - "明確なビジネス価値の実現"
        - "ユーザーニーズの適切な反映"
      communicationPreferences:
        - { type: "email", frequency: "weekly" }
        - { type: "meeting", frequency: "bi-weekly" }
      permissions: ["read", "comment", "approve_l0_l1"]
      approvalAuthority: ["business_requirements", "user_requirements"]

    DEV001:
      name: "開発チームリード"
      role: "tech_lead"
      organization: "開発部"
      influence: "high"
      interest: "high"
      involvementByLevel:
        0: "consulted"  # Business Need
        1: "consulted"  # Stakeholder Request
        2: "reviewer"   # System Requirement
        3: "owner"      # Feature Specification
        4: "owner"      # User Story
        5: "owner"      # Implementation Task
      concerns: ["technical_feasibility", "architecture", "quality"]
      permissions: ["read", "write", "approve_l3_l4_l5"]

  qualityAttributes:
    PERF001:
      name: "レスポンス性能"
      category: "performance"
      description: "システムの応答性能要件"
      targets:
        - { metric: "response_time", value: "< 2秒", priority: "high" }
        - { metric: "throughput", value: "> 1000req/sec", priority: "medium" }
      applicableLevels: [2, 3, 4, 5]
      realizationStrategies:
        - "キャッシング戦略の実装"
        - "データベース最適化"
        - "CDN活用"
      verificationMethods:
        - { method: "load_testing", tool: "JMeter" }
        - { method: "monitoring", tool: "APM" }

    SEC001:
      name: "データ保護"
      category: "security"
      description: "個人情報・機密データの保護"
      targets:
        - { metric: "encryption", value: "AES-256", priority: "high" }
        - { metric: "access_control", value: "RBAC", priority: "high" }
      applicableLevels: [1, 2, 3, 4, 5]
      complianceRequirements: ["GDPR", "個人情報保護法"]

    USAB001:
      name: "ユーザビリティ"
      category: "usability"
      description: "使いやすさの要件"
      targets:
        - { metric: "task_completion_rate", value: "> 95%", priority: "high" }
        - { metric: "user_satisfaction", value: "> 4.5/5", priority: "medium" }
      applicableLevels: [1, 3, 4]

  constraints:
    TECH001:
      name: "技術スタック制約"
      type: "technical"
      description: "使用可能な技術スタックの制限"
      rationale: "既存システムとの互換性確保"
      scope: "project_wide"
      applicableLevels: [3, 4, 5]
      constraints:
        - { field: "programming_language", value: ["TypeScript", "Java"], operator: "in" }
        - { field: "database", value: ["PostgreSQL", "MongoDB"], operator: "in" }
        - { field: "cloud_platform", value: "AWS", operator: "equals" }

    BUD001:
      name: "予算制約"
      type: "budget"
      description: "プロジェクト予算の上限"
      rationale: "年度予算の制限"
      constraints:
        - { field: "total_cost", value: 10000000, operator: "less_than", unit: "JPY" }
        - { field: "monthly_cost", value: 500000, operator: "less_than", unit: "JPY" }

  risks:
    RISK001:
      name: "技術的複雑性リスク"
      category: "technical"
      description: "新技術導入による複雑性増加"
      probability: "medium"
      impact: "high"
      riskScore: 6
      affectedLevels: [3, 4, 5]
      mitigationStrategies:
        - { strategy: "proof_of_concept", description: "事前POC実施" }
        - { strategy: "expert_consultation", description: "外部専門家の活用" }
      contingencyPlans:
        - { condition: "POC失敗", action: "代替技術への切り替え" }

# マインドマップ構造（テンプレート）
root:
  id: "root"
  title: "プロジェクト名"
  description: "プロジェクトの概要説明"
  abstractionLevel: 0
  nodeType: "business_opportunity"
  status: "todo"
  phase: "planning"
  priority: "high"
  owner: "PM001"
  stakeholders: ["PM001", "DEV001"]
  levelSpecificData:
    level: 0
    businessCase: "ビジネスケースを記述してください"
    roi:
      expectedROI: 150
      paybackPeriod: 24
      investmentAmount: 5000000
    strategicAlignment: ["digital_transformation", "customer_satisfaction"]
    marketOpportunity:
      marketSize: "To be defined"
      competitiveAdvantage: "To be defined"
  
  children:
    - id: "biz-need-001"
      title: "ビジネスニーズ例"
      description: "具体的なビジネスニーズを記述"
      abstractionLevel: 0
      nodeType: "business_problem"
      status: "todo"
      priority: "high"
      owner: "PM001"
      levelSpecificData:
        level: 0
        businessCase: "現状の課題とその解決による効果"
        roi:
          expectedROI: 120
          paybackPeriod: 18
      
      children:
        - id: "req-001"
          title: "ステークホルダー要求例"
          description: "ステークホルダーからの具体的な要求"
          abstractionLevel: 1
          nodeType: "user_request"
          status: "todo"
          priority: "high"
          owner: "PM001"
          relationships:
            - sourceNodeId: "req-001"
              targetNodeId: "biz-need-001"
              relationshipType: "realizes"
              strength: "mandatory"
              confidence: 90
              rationale: "ビジネスニーズを実現するための要求"
          levelSpecificData:
            level: 1
            requestor:
              stakeholderId: "PM001"
              department: "プロダクト部"
            rationale: "要求の背景・理由"
            impactAnalysis:
              businessImpact: "high"
              technicalImpact: "medium"
              userImpact: "high"
            acceptanceCriteria:
              - "受け入れ基準1"
              - "受け入れ基準2"
          
          children:
            - id: "story-001"
              title: "ユーザーストーリー例"
              description: "ユーザー観点での機能説明"
              abstractionLevel: 2
              nodeType: "user_story"
              status: "todo"
              priority: "high"
              owner: "PM001"
              relationships:
                - sourceNodeId: "story-001"
                  targetNodeId: "req-001"
                  relationshipType: "realizes"
                  strength: "mandatory"
                  confidence: 90
                  rationale: "ステークホルダー要求を具体的なユーザーストーリーとして表現"
              levelSpecificData:
                level: 2
                userRole: "一般ユーザー"
                userGoal: "商品を素早く検索したい"
                userBenefit: "時間を節約して購入体験を向上させる"
                persona:
                  personaId: "persona-001"
                  personaName: "忙しい会社員"
                  demographics: "30代、会社員、時間に余裕がない"
                  goals: ["効率的な買い物", "時間の節約"]
                  painPoints: ["検索が遅い", "欲しい商品が見つからない"]
                priority:
                  priority: "high"
                  businessValue: 8
                  urgency: "high"
                  rationale: "ユーザー離脱率改善の最重要項目"
                acceptanceCriteria:
                  - id: "ac-001"
                    description: "キーワード入力で2秒以内に結果表示"
                    testable: true
                    priority: "high"
                  - id: "ac-002"
                    description: "関連商品も表示される"
                    testable: true
                    priority: "medium"
                context:
                  businessValue: "ユーザー離脱率を30%改善し、売上向上に直結"
                  userPain: "現在の検索が遅すぎて離脱してしまう"
                  competitiveAdvantage: "競合より高速な検索体験"
                assumptions:
                  - "ユーザーは2秒以内の応答を期待"
                  - "検索精度よりも速度を重視"
                constraints:
                  - "既存のDB構造を大幅変更不可"
              
              children:
                - id: "sys-req-001"
                  title: "システム要件例"
                  description: "システムが満たすべき要件"
                  abstractionLevel: 3
                  nodeType: "functional_requirement"
                  status: "todo"
                  priority: "high"
                  owner: "DEV001"
                  relationships:
                    - sourceNodeId: "sys-req-001"
                      targetNodeId: "story-001"
                      relationshipType: "realizes"
                      strength: "mandatory"
                      confidence: 85
                      rationale: "ユーザーストーリーを技術的に実現するための要件"
                  levelSpecificData:
                    level: 3
                    derivedFromStories: ["story-001"]
                    requirementType: "functional"
                    functionalDetails:
                      inputs: ["検索キーワード", "カテゴリフィルタ", "価格帯"]
                      outputs: ["商品リスト", "関連商品", "検索統計", "フィルタ情報"]
                      businessRules: 
                        - "在庫がない商品は表示しない"
                        - "ユーザーの過去の購入履歴を考慮"
                      exceptions:
                        - "検索キーワードが空の場合はエラー"
                        - "システム負荷が高い場合は簡易検索モード"
                    qualityAttributes:
                      - name: "応答時間"
                        target: "< 2秒"
                        measurable: true
                        priority: "high"
                      - name: "検索精度"
                        target: "> 95%"
                        measurable: true
                        priority: "medium"
                    verificationCriteria:
                      measurable: true
                      testable: true
                      criteria:
                        - "負荷テストで応答時間2秒以内を確認"
                        - "ユーザビリティテストで満足度4.5以上"
                        - "A/Bテストでコンバージョン率向上を確認"
                
                  children:
                    - id: "design-001"
                      title: "検索システム設計"
                      description: "高速検索を実現する設計仕様"
                      abstractionLevel: 4
                      nodeType: "architecture_design"
                      status: "todo"
                      priority: "high"
                      owner: "DEV001"
                      relationships:
                        - sourceNodeId: "design-001"
                          targetNodeId: "sys-req-001"
                          relationshipType: "realizes"
                          strength: "mandatory"
                          confidence: 90
                          rationale: "システム要件を満たす技術設計"
                      levelSpecificData:
                        level: 4
                        implementsRequirements: ["sys-req-001"]
                        designType: "architecture"
                        designReferences:
                          - designId: "arch-search-001"
                            designType: "architecture"
                            documentType: "c4_diagram"
                            documentUrl: "/designs/search-architecture.puml"
                            description: "検索システムのアーキテクチャ設計"
                            designElements:
                              - elementId: "search-service"
                                elementType: "microservice"
                                description: "検索処理を行うマイクロサービス"
                              - elementId: "elasticsearch-cluster"
                                elementType: "datastore"
                                description: "高速検索用のElasticsearchクラスター"
                              - elementId: "redis-cache"
                                elementType: "cache"
                                description: "検索結果キャッシュ用Redis"
                          - designId: "api-search-001"
                            designType: "api"
                            documentType: "openapi"
                            documentUrl: "/designs/search-api.yaml"
                            description: "検索APIの詳細仕様"
                            designElements:
                              - elementId: "search-endpoint"
                                elementType: "api_endpoint"
                                description: "商品検索エンドポイント"
                        implementationReadiness:
                          technicalFeasibility: 85
                          resourceAvailability: 70
                          dependencyResolution: 90
                          riskMitigation: 80
                        implementationGuidance:
                          recommendedApproach: "段階的移行：まずキャッシュ導入、次にElasticsearch導入"
                          technicalConsiderations:
                            - "既存DBとElasticsearchの同期方法"
                            - "検索インデックスの最適化"
                          performanceConsiderations:
                            - "キャッシュ戦略の設計"
                            - "負荷分散の構成"
                          securityConsiderations:
                            - "検索クエリのサニタイゼーション"
                            - "個人情報の検索結果からの除外"
                      
                      children:
                        - id: "task-001"
                          title: "検索APIの実装"
                          description: "Elasticsearch統合による高速検索API実装"
                          abstractionLevel: 5
                          nodeType: "development_task"
                          status: "todo"
                          priority: "high"
                          owner: "DEV001"
                          assignee: "DEV001"
                          deadline: "2024-03-31"
                          relationships:
                            - sourceNodeId: "task-001"
                              targetNodeId: "design-001"
                              relationshipType: "realizes"
                              strength: "mandatory"
                              confidence: 90
                              rationale: "設計仕様に基づく実装"
                          levelSpecificData:
                            level: 5
                            taskType: "backend_development"
                            technicalDetails:
                              framework: "Spring Boot"
                              language: "Java"
                              database: "Elasticsearch"
                              tools: ["Docker", "Maven"]
                              apis: ["/api/search", "/api/suggestions"]
                              components: ["SearchController", "SearchService", "ElasticsearchRepository"]
                              libraries: ["Spring Data Elasticsearch", "Jackson"]
                            estimatedEffort:
                              hours: 40
                              confidence: 80
                              complexity: "medium"
                              assumptions:
                                - "Elasticsearchクラスターは既にセットアップ済み"
                                - "商品データの移行は別タスク"
                            dependencies:
                              - { taskId: "elasticsearch-setup", type: "finish_to_start" }
                              - { taskId: "data-migration", type: "finish_to_start" }
                            completionCriteria:
                              - "検索APIエンドポイント実装完了"
                              - "単体テスト90%カバレッジ達成"
                              - "API仕様書更新完了"
                              - "応答時間2秒以内を達成"
                            testRequirements:
                              - { type: "unit_test", coverage: 90, tools: ["JUnit", "Mockito"] }
                              - { type: "integration_test", scenarios: 8, tools: ["TestContainers"] }
                              - { type: "performance_test", scenarios: 3, tools: ["JMeter"] }
                        
                        - id: "task-002"
                          title: "検索UIコンポーネント実装"
                          description: "React検索インターフェースの実装"
                          abstractionLevel: 5
                          nodeType: "development_task"
                          status: "todo"
                          priority: "high"
                          owner: "DEV001"
                          relationships:
                            - sourceNodeId: "task-002"
                              targetNodeId: "design-001"
                              relationshipType: "realizes"
                              strength: "mandatory"
                            - sourceNodeId: "task-002"
                              targetNodeId: "task-001"
                              relationshipType: "depends_on"
                              strength: "mandatory"
                              rationale: "検索APIが完成してからUI実装"
                          levelSpecificData:
                            level: 5
                            taskType: "frontend_development"
                            technicalDetails:
                              framework: "React"
                              language: "TypeScript"
                              tools: ["Vite", "npm"]
                              libraries: ["React Query", "Axios", "React Hook Form"]
                              components: ["SearchForm", "SearchResults", "SearchFilters", "ProductCard"]
                            estimatedEffort:
                              hours: 32
                              confidence: 85
                              complexity: "medium"
                            dependencies:
                              - { taskId: "task-001", type: "finish_to_start" }
                            completionCriteria:
                              - "検索コンポーネント実装完了"
                              - "レスポンシブデザイン対応"
                              - "APIとの連携確認完了"
                              - "アクセシビリティ要件クリア"
                            testRequirements:
                              - { type: "unit_test", coverage: 85, tools: ["Vitest", "React Testing Library"] }
                              - { type: "integration_test", scenarios: 5 }
                        
                        - id: "task-003"
                          title: "検索機能E2Eテスト"
                          description: "ユーザーシナリオに基づくE2Eテスト実装"
                          abstractionLevel: 5
                          nodeType: "test_task"
                          status: "todo"
                          priority: "medium"
                          owner: "DEV001"
                          relationships:
                            - sourceNodeId: "task-003"
                              targetNodeId: "design-001"
                              relationshipType: "verifies"
                              strength: "mandatory"
                            - sourceNodeId: "task-003"
                              targetNodeId: "task-002"
                              relationshipType: "depends_on"
                              strength: "mandatory"
                          levelSpecificData:
                            level: 5
                            taskType: "e2e_testing"
                            technicalDetails:
                              framework: "Playwright"
                              language: "TypeScript"
                              tools: ["Docker", "CI/CD Pipeline"]
                            estimatedEffort:
                              hours: 16
                              confidence: 75
                              complexity: "simple"
                            dependencies:
                              - { taskId: "task-002", type: "finish_to_start" }
                            completionCriteria:
                              - "ユーザーストーリーのテストシナリオ完全カバー"
                              - "CI/CDパイプラインへの統合完了"
                              - "テスト結果レポート自動生成"
                            testRequirements:
                              - { type: "e2e_test", scenarios: 6, tools: ["Playwright"] }

# トレーサビリティマトリックス（自動生成される参考例）
traceabilityMatrix:
  biz-need-001:
    realizes: []
    realizedBy: ["req-001"]
    derivedRequirements: ["req-001", "sys-req-001", "feature-001", "story-001"]
    implementedBy: ["task-001", "task-002"]
    verifiedBy: ["task-003"]
    coverage: 100

  req-001:
    realizes: ["biz-need-001"]
    realizedBy: ["sys-req-001"]
    derivedRequirements: ["sys-req-001", "feature-001", "story-001"]
    coverage: 100

# 品質メトリクス（自動計算される参考例）
qualityMetrics:
  completenessScore: 85
  consistencyScore: 92
  traceabilityScore: 98
  maturityScore: 75
  overallQualityScore: 87
  
  nodeCompleteness:
    - { level: 0, totalNodes: 2, completeNodes: 1, completeness: 50 }
    - { level: 1, totalNodes: 1, completeNodes: 1, completeness: 100 }
    - { level: 2, totalNodes: 1, completeNodes: 1, completeness: 100 }
    - { level: 3, totalNodes: 1, completeNodes: 1, completeness: 100 }
    - { level: 4, totalNodes: 1, completeNodes: 1, completeness: 100 }
    - { level: 5, totalNodes: 3, completeNodes: 2, completeness: 67 }

# 設定
settings:
  theme: "light"
  layout: "tree"
  autoSave:
    enabled: true
    interval: 30
    maxVersions: 50
  validation:
    enabled: true
    strictMode: false
    autoFix: true
  ai:
    enabled: false
    provider: "openai"
    features:
      suggestions: true
      validation: true
      generation: true

# メタデータ
metadata:
  createdAt: "2024-01-15T09:00:00Z"
  updatedAt: "2024-01-15T09:00:00Z"
  authors: ["テンプレート作成者"]
  version: "1.0.0"
  description: "要求から実装まで一気通貫で管理する統合要件定義テンプレート"
  tags: ["requirements", "unified", "template"]